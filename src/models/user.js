import mongoose from "mongoose";
import AuthoRoles from "../utils/authRoles.js";
import bcrypt from "bcryptjs";
import JWT from "jsonwebtoken";
import config from "../config/index.js";
import crypto from "crypto"

const userSchema = new mongoose.Schema(
    {
name:{
    type:String,
    required:["true","name is required"],
    maxLength:[50,"name must be less then 50 char"]
},
 email:{
    type:String,
    required:["true","eamil is required"],
    
 },
 password:{
    type:String,
    required:[true,"password is required"],
    minLength:[8,"password must be at least 8 chars"],
    select:false
 },
 role:{
    type:String,
    enum: Object.values(AuthoRoles),
    default:AuthoRoles.USER
 },
 forgotPasswordTOken:String,
 forgotPasswordExpiry:Date   
},{timestamps:true})

// encrypt the password

userSchema.pre("save", async function(next){
    if (!this.isModified("password")) return next()
    this.password = await bcrypt.hash(this.password,10)
    next()
})

userSchema.methods = {
    // compare password
    comparePassword : async function(enteredPassword){
        return await bcrypt.compare(enteredPassword,this.password)
    },
    // generate JWT token
    getJWTtoken : function(){
        JWT.sign({_id : this._id , role : this.role}, config.JWT_SECRET , {
            expiresIn: config.JWT_EXPIRY
        })
    },
    // generate forgot password token
    generateForgotPasswordToken: function(){
        const forgotToken = crypto.randomBytes(20).toString("hex")
        // just to encrypt the token generated by crypto
        this.forgotPasswordTOken = crypto
        .createHash("sha256")
        .update(forgotToken)
        .digest("hex")
        // time for token to expire
        this.forgotPasswordExpiry = Date.now() + 20 * 60 * 1000
        return forgotToken
    }
}

export default mongoose.model("User",userSchema)